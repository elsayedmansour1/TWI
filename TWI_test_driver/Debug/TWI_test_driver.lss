
TWI_test_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000504  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000040f  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  64:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_voidMasterInit>:
#include"TWI_Register.h"
#include"TWI_Interface.h"


void TWI_voidMasterInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	//select prescaler for 64
	CLR_BIT(TWSR,0);
  74:	a1 e2       	ldi	r26, 0x21	; 33
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e1 e2       	ldi	r30, 0x21	; 33
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	8c 93       	st	X, r24
	CLR_BIT(TWSR,1);
  82:	a1 e2       	ldi	r26, 0x21	; 33
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e1 e2       	ldi	r30, 0x21	; 33
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8c 93       	st	X, r24
	//set frequency
	TWBR=12;
  90:	e0 e2       	ldi	r30, 0x20	; 32
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	8c e0       	ldi	r24, 0x0C	; 12
  96:	80 83       	st	Z, r24
	//enable ack
	SET_BIT(TWCR,6);
  98:	a6 e5       	ldi	r26, 0x56	; 86
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	e6 e5       	ldi	r30, 0x56	; 86
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	8c 93       	st	X, r24
	//enable TWI
	SET_BIT(TWCR,2);
  a6:	a6 e5       	ldi	r26, 0x56	; 86
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e6 e5       	ldi	r30, 0x56	; 86
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	8c 93       	st	X, r24
}
  b4:	cf 91       	pop	r28
  b6:	df 91       	pop	r29
  b8:	08 95       	ret

000000ba <TWI_voidStartCondition>:
void TWI_voidStartCondition(void)
{
  ba:	df 93       	push	r29
  bc:	cf 93       	push	r28
  be:	0f 92       	push	r0
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	//set start condition
	SET_BIT(TWCR,5);
  c4:	a6 e5       	ldi	r26, 0x56	; 86
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e6 e5       	ldi	r30, 0x56	; 86
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	8c 93       	st	X, r24
	//make sure flag clear
	SET_BIT(TWCR,7);
  d2:	a6 e5       	ldi	r26, 0x56	; 86
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e6 e5       	ldi	r30, 0x56	; 86
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	8c 93       	st	X, r24
	//wait until flag be set
	while(!GET_BIT(TWCR,7));
  e0:	e6 e5       	ldi	r30, 0x56	; 86
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	88 23       	and	r24, r24
  e8:	dc f7       	brge	.-10     	; 0xe0 <TWI_voidStartCondition+0x26>
	//make sure return state for start condition
	if((TWSR & 0xf8) !=0x08)
  ea:	e1 e2       	ldi	r30, 0x21	; 33
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
	{

	}
}
  f0:	0f 90       	pop	r0
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <TWI_voidSendSlaveAddressWrite>:
void TWI_voidSendSlaveAddressWrite(u8 copy_u8SlaveAddress)
{
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	00 d0       	rcall	.+0      	; 0xfe <TWI_voidSendSlaveAddressWrite+0x6>
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	89 83       	std	Y+1, r24	; 0x01
	//CLR bit of start condition
	CLR_BIT(TWCR,5);
 104:	a6 e5       	ldi	r26, 0x56	; 86
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e6 e5       	ldi	r30, 0x56	; 86
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 7d       	andi	r24, 0xDF	; 223
 110:	8c 93       	st	X, r24
	//write slave address
	TWDR=copy_u8SlaveAddress<<1;
 112:	e3 e2       	ldi	r30, 0x23	; 35
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	88 0f       	add	r24, r24
 11a:	80 83       	st	Z, r24
	//set write operation
	CLR_BIT(TWDR,0);
 11c:	a3 e2       	ldi	r26, 0x23	; 35
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e3 e2       	ldi	r30, 0x23	; 35
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	8c 93       	st	X, r24
	//make sure flag be clear
	SET_BIT(TWCR,7);
 12a:	a6 e5       	ldi	r26, 0x56	; 86
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e6 e5       	ldi	r30, 0x56	; 86
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 68       	ori	r24, 0x80	; 128
 136:	8c 93       	st	X, r24
	//wait until flag be set
	while(!GET_BIT(TWCR,7));
 138:	e6 e5       	ldi	r30, 0x56	; 86
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	dc f7       	brge	.-10     	; 0x138 <TWI_voidSendSlaveAddressWrite+0x40>
	//make sure return state for slave with write
	if((TWSR &0xf8)!=0x18)
 142:	e1 e2       	ldi	r30, 0x21	; 33
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
	{
			//for error state when you need it
	}

}
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	cf 91       	pop	r28
 14e:	df 91       	pop	r29
 150:	08 95       	ret

00000152 <TWI_voidSendSlaveAddressRead>:
void TWI_voidSendSlaveAddressRead(u8 copy_u8SlaveAddress)
{
 152:	df 93       	push	r29
 154:	cf 93       	push	r28
 156:	00 d0       	rcall	.+0      	; 0x158 <TWI_voidSendSlaveAddressRead+0x6>
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
	//CLR bit of start condition
	CLR_BIT(TWCR,5);
 15e:	a6 e5       	ldi	r26, 0x56	; 86
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e6 e5       	ldi	r30, 0x56	; 86
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8f 7d       	andi	r24, 0xDF	; 223
 16a:	8c 93       	st	X, r24
	//write slave address
	TWDR=copy_u8SlaveAddress<<1;
 16c:	e3 e2       	ldi	r30, 0x23	; 35
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	88 0f       	add	r24, r24
 174:	80 83       	st	Z, r24
	//set Read operation
	SET_BIT(TWDR,0);
 176:	a3 e2       	ldi	r26, 0x23	; 35
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	e3 e2       	ldi	r30, 0x23	; 35
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	81 60       	ori	r24, 0x01	; 1
 182:	8c 93       	st	X, r24
	//make sure flag is clear
	SET_BIT(TWCR,7);
 184:	a6 e5       	ldi	r26, 0x56	; 86
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	e6 e5       	ldi	r30, 0x56	; 86
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	8c 93       	st	X, r24
	//wait until flag be set
	while(!GET_BIT(TWCR,7));
 192:	e6 e5       	ldi	r30, 0x56	; 86
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	dc f7       	brge	.-10     	; 0x192 <TWI_voidSendSlaveAddressRead+0x40>
	//make sure return state for slave with write
	if((TWSR &0xf8)!=0x40)
 19c:	e1 e2       	ldi	r30, 0x21	; 33
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
	{
			//for error state when you need it
	}
}
 1a2:	0f 90       	pop	r0
 1a4:	0f 90       	pop	r0
 1a6:	cf 91       	pop	r28
 1a8:	df 91       	pop	r29
 1aa:	08 95       	ret

000001ac <TWI_voidMasterSendData>:
void TWI_voidMasterSendData(u8 copy_u8Data)
{
 1ac:	df 93       	push	r29
 1ae:	cf 93       	push	r28
 1b0:	00 d0       	rcall	.+0      	; 0x1b2 <TWI_voidMasterSendData+0x6>
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	89 83       	std	Y+1, r24	; 0x01
	//Write your data
	TWDR=copy_u8Data;
 1b8:	e3 e2       	ldi	r30, 0x23	; 35
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	80 83       	st	Z, r24
	//make sure flag is clear
	SET_BIT(TWCR,7);
 1c0:	a6 e5       	ldi	r26, 0x56	; 86
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	e6 e5       	ldi	r30, 0x56	; 86
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	80 68       	ori	r24, 0x80	; 128
 1cc:	8c 93       	st	X, r24
	//wait until flag be clear
	while(!GET_BIT(TWCR,7));
 1ce:	e6 e5       	ldi	r30, 0x56	; 86
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 23       	and	r24, r24
 1d6:	dc f7       	brge	.-10     	; 0x1ce <TWI_voidMasterSendData+0x22>
	//make sure return state for master send data
	if((TWSR &0xf8)!=0x40)
 1d8:	e1 e2       	ldi	r30, 0x21	; 33
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
	{
			//for error state when you need it
	}
}
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	cf 91       	pop	r28
 1e4:	df 91       	pop	r29
 1e6:	08 95       	ret

000001e8 <TWI_voidMasterReceiveData>:
void TWI_voidMasterReceiveData(u8 *copy_u8Data)
{
 1e8:	df 93       	push	r29
 1ea:	cf 93       	push	r28
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <TWI_voidMasterReceiveData+0x6>
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 83       	std	Y+1, r24	; 0x01

	//make sure flag is clear
	SET_BIT(TWCR,7);
 1f6:	a6 e5       	ldi	r26, 0x56	; 86
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	e6 e5       	ldi	r30, 0x56	; 86
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	80 68       	ori	r24, 0x80	; 128
 202:	8c 93       	st	X, r24
	//wait until flag be clear
	while(!GET_BIT(TWCR,7));
 204:	e6 e5       	ldi	r30, 0x56	; 86
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	88 23       	and	r24, r24
 20c:	dc f7       	brge	.-10     	; 0x204 <TWI_voidMasterReceiveData+0x1c>
	//make sure return state for master send data
	if((TWSR &0xf8)!=0x50)
 20e:	e1 e2       	ldi	r30, 0x21	; 33
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	88 2f       	mov	r24, r24
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	88 7f       	andi	r24, 0xF8	; 248
 21a:	90 70       	andi	r25, 0x00	; 0
 21c:	80 35       	cpi	r24, 0x50	; 80
 21e:	91 05       	cpc	r25, r1
 220:	31 f4       	brne	.+12     	; 0x22e <TWI_voidMasterReceiveData+0x46>
	{
			//for error state when you need it
	}
	else
	{
		*copy_u8Data=TWDR;
 222:	e3 e2       	ldi	r30, 0x23	; 35
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	e9 81       	ldd	r30, Y+1	; 0x01
 22a:	fa 81       	ldd	r31, Y+2	; 0x02
 22c:	80 83       	st	Z, r24
	}
}
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	cf 91       	pop	r28
 234:	df 91       	pop	r29
 236:	08 95       	ret

00000238 <TWI_voidStopCondition>:
void TWI_voidStopCondition(void)
{
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
	//set Stop condition
	SET_BIT(TWCR,4);
 240:	a6 e5       	ldi	r26, 0x56	; 86
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	e6 e5       	ldi	r30, 0x56	; 86
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	80 61       	ori	r24, 0x10	; 16
 24c:	8c 93       	st	X, r24
}
 24e:	cf 91       	pop	r28
 250:	df 91       	pop	r29
 252:	08 95       	ret

00000254 <main>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "TWI_Interface.h"

int main(void)
{
 254:	df 93       	push	r29
 256:	cf 93       	push	r28
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62


	return 0;
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
}
 260:	cf 91       	pop	r28
 262:	df 91       	pop	r29
 264:	08 95       	ret

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
